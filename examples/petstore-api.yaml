openapi: 3.0.0
info:
  title: Pet Store API
  description: A sample API that uses a petstore as an example to demonstrate features
  version: 1.0.0
  contact:
    name: API Support
    url: https://github.com/your-org/oas-sandbox
    email: support@example.com

servers:
  - url: https://petstore.example.com/api/v1
    description: Production server
  - url: https://staging.petstore.example.com/api/v1
    description: Staging server

paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
        - name: tag
          in: query
          description: Filter by tag
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
              examples:
                sample:
                  value:
                    - id: 1
                      name: "Fluffy"
                      tag: "cat"
                      status: "available"
                    - id: 2
                      name: "Rex"
                      tag: "dog" 
                      status: "available"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a pet
      operationId: createPet
      tags:
        - pets
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPet"
            examples:
              cat:
                value:
                  name: "Mittens"
                  tag: "cat"
              dog:
                value:
                  name: "Buddy"
                  tag: "dog"
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a pet
      operationId: updatePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated pet information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a pet
      operationId: deletePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /pets/{petId}/photos:
    post:
      summary: Upload a photo for a pet
      operationId: uploadPetPhoto
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoUploadResponse"

  /owners:
    get:
      summary: List all pet owners
      operationId: listOwners
      tags:
        - owners
      responses:
        '200':
          description: A list of pet owners
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Owner"

    post:
      summary: Create a new owner
      operationId: createOwner
      tags:
        - owners
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOwner"
      responses:
        '201':
          description: Owner created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"

  /owners/{ownerId}:
    get:
      summary: Get owner by ID
      operationId: getOwnerById
      tags:
        - owners
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Owner details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Fluffy"
        tag:
          type: string
          example: "cat"
        status:
          type: string
          enum:
            - available
            - pending
            - sold
          example: "available"
        photoUrls:
          type: array
          items:
            type: string
            format: uri
          example:
            - "https://example.com/photos/pet1.jpg"
        category:
          $ref: "#/components/schemas/Category"
        owner:
          $ref: "#/components/schemas/Owner"

    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Fluffy"
        tag:
          type: string
          example: "cat"
        status:
          type: string
          enum:
            - available
            - pending
            - sold
          default: "available"
        categoryId:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Cats"

    Owner:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        phone:
          type: string
          example: "+1-555-0123"
        address:
          $ref: "#/components/schemas/Address"

    NewOwner:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        phone:
          type: string
          example: "+1-555-0123"
        address:
          $ref: "#/components/schemas/Address"

    Address:
      type: object
      properties:
        street:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Anytown"
        state:
          type: string
          example: "NY"
        zipCode:
          type: string
          pattern: "^[0-9]{5}(-[0-9]{4})?$"
          example: "12345"
        country:
          type: string
          default: "US"
          example: "US"

    PhotoUploadResponse:
      type: object
      properties:
        url:
          type: string
          format: uri
          example: "https://example.com/photos/pet123-photo1.jpg"
        filename:
          type: string
          example: "pet123-photo1.jpg"
        size:
          type: integer
          example: 2048576

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: "Pet not found"
        details:
          type: string
          example: "No pet found with ID 123"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - ApiKeyAuth: []
  - BearerAuth: []